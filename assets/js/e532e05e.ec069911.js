"use strict";(self.webpackChunkqb_docs=self.webpackChunkqb_docs||[]).push([[302],{3118:function(e,n,o){o.r(n),o.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return a},toc:function(){return d},default:function(){return p}});var t=o(7462),l=o(3366),r=(o(7294),o(3905)),i=["components"],s={sidebar_position:2},c="Functions",a={unversionedId:"tutorial-basics/functions",id:"tutorial-basics/functions",isDocsHomePage:!1,title:"Functions",description:"QBCore.Functions.GetPlayerData",source:"@site/docs/tutorial-basics/functions.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/functions",permalink:"/qb-docs/docs/tutorial-basics/functions",editUrl:"https://github.com/qbcore-framework/qb-docs/edit/main/docs/docs/tutorial-basics/functions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Events",permalink:"/qb-docs/docs/tutorial-basics/events"},next:{title:"Events",permalink:"/qb-docs/docs/tutorial-extras/events"}},d=[{value:"QBCore.Functions.GetPlayerData",id:"qbcorefunctionsgetplayerdata",children:[]},{value:"QBCore.Functions.GetCoords",id:"qbcorefunctionsgetcoords",children:[]},{value:"QBCore.Functions.HasItem",id:"qbcorefunctionshasitem",children:[]},{value:"QBCore.Functions.Notify",id:"qbcorefunctionsnotify",children:[]},{value:"QBCore.Functions.TriggerCallback",id:"qbcorefunctionstriggercallback",children:[]},{value:"QBCore.Functions.Progressbar",id:"qbcorefunctionsprogressbar",children:[]},{value:"QBCore.Functions.GetVehicles",id:"qbcorefunctionsgetvehicles",children:[]},{value:"QBCore.Functions.GetCoreObject",id:"qbcorefunctionsgetcoreobject",children:[]},{value:"Example exports QBCore.Functions.GetCoreObject",id:"example-exports-qbcorefunctionsgetcoreobject",children:[]},{value:"QBCore.Functions.GetPlayers",id:"qbcorefunctionsgetplayers",children:[]},{value:"QBCore.Functions.GetPeds",id:"qbcorefunctionsgetpeds",children:[]},{value:"QBCore.Functions.GetClosestPed",id:"qbcorefunctionsgetclosestped",children:[]},{value:"QBCore.Functions.GetClosestVehicle",id:"qbcorefunctionsgetclosestvehicle",children:[]},{value:"QBCore.Functions.GetClosestObject",id:"qbcorefunctionsgetclosestobject",children:[]},{value:"QBCore.Functions.GetClosestPlayer",id:"qbcorefunctionsgetclosestplayer",children:[]},{value:"QBCore.Functions.GetPlayersFromCoords",id:"qbcorefunctionsgetplayersfromcoords",children:[]},{value:"QBCore.Functions.SpawnVehicle",id:"qbcorefunctionsspawnvehicle",children:[]},{value:"QBCore.Functions.DeleteVehicle",id:"qbcorefunctionsdeletevehicle",children:[]},{value:"QBCore.Functions.Getplate",id:"qbcorefunctionsgetplate",children:[]},{value:"QBCore.Functions.GetVehicleProperties",id:"qbcorefunctionsgetvehicleproperties",children:[]},{value:"QBCore.Functions.SetVehicleProperties",id:"qbcorefunctionssetvehicleproperties",children:[]}],h={toc:d};function p(e){var n=e.components,o=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,t.Z)({},h,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"qbcorefunctionsgetplayerdata"},"QBCore.Functions.GetPlayerData"),(0,r.kt)("p",null,'Perhaps the most used function in the framework. This functions returns the players data of the current source which, since its used client side, is automatically the client or player. It can be used with modifiers on the end starting with a "." (period).'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPlayerData(cb)\n    if cb then\n        cb(QBCore.PlayerData)\n    else\n        return QBCore.PlayerData\n    end\nend\n\nExample: local player = QBCore.Functions.GetPlayerData()\nExample: local jobName = player.job.name or QBCore.Functions.GetPlayerData().job.name\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetcoords"},"QBCore.Functions.GetCoords"),(0,r.kt)("p",null,"This function operates very similarly to how the native GetEntityCoords does but it returns the heading as well"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetCoords(entity)\n    local coords = GetEntityCoords(entity, false)\n    local heading = GetEntityHeading(entity)\n    return vector4(coords.x, coords.y, coords.z, heading)\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionshasitem"},"QBCore.Functions.HasItem"),(0,r.kt)("p",null,"Returns whether or not a player has a certain item"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.HasItem(item)\n    QBCore.Functions.TriggerCallback('QBCore:HasItem', function(result)\n        if result then\n            return true\n        end\n        return false\n    end, item)\n    return false\nend\n\nExample: local hasItem = QBCore.Functions.HasItem('weapon_pistol')\n")),(0,r.kt)("h3",{id:"qbcorefunctionsnotify"},"QBCore.Functions.Notify"),(0,r.kt)("p",null,"The core notification system that is used. Has three paramters to pass which are text, notification type and how length of notification. The notifications allow for a title and a caption or just a singular message. Text can be a string or a table (refer to example below), type must be a string and length must be a number."),(0,r.kt)("p",null,"Current types: primary(default), success, error, police, ambulance - An unlimited amount of types can be made in qb-core/html/app.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.Notify(text, textype, length)\n    if type(text) == \"table\" then\n        local ttext = text.text or 'Placeholder'\n        local caption = text.caption or 'Placeholder'\n        local ttype = textype or 'primary'\n        local length = length or 5000\n        SendNUIMessage({\n            type = ttype,\n            length = length,\n            text = ttext,\n            caption = caption\n        })\n    else\n        local ttype = textype or 'primary'\n        local length = length or 5000\n        SendNUIMessage({\n            type = ttype,\n            length = length,\n            text = text\n        })\n    end\nend\n\nExample: QBCore.Functions.Notify('This is a test', 'success', 5000)\n\nExample: QBCore.Functions.Notify({text = 'Test', caption = 'Test Caption'}, 'police', 5000)\n")),(0,r.kt)("h3",{id:"qbcorefunctionstriggercallback"},"QBCore.Functions.TriggerCallback"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.TriggerCallback(name, cb, ...)\n    QBCore.ServerCallbacks[name] = cb\n    TriggerServerEvent('QBCore:Server:TriggerCallback', name, ...)\nend\n\nExample:\n\nQBCore.Functions.TriggerCallback('callbackName', function(cb)\n    -- Do stuff here\nend, parameters)\n")),(0,r.kt)("h3",{id:"qbcorefunctionsprogressbar"},"QBCore.Functions.Progressbar"),(0,r.kt)("p",null,"Wrapper for progressbar export"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'function QBCore.Functions.Progressbar(name, label, duration, useWhileDead, canCancel, disableControls, animation, prop, propTwo, onFinish, onCancel)\n    exports[\'progressbar\']:Progress({\n        name = name:lower(),\n        duration = duration,\n        label = label,\n        useWhileDead = useWhileDead,\n        canCancel = canCancel,\n        controlDisables = disableControls,\n        animation = animation,\n        prop = prop,\n        propTwo = propTwo,\n    }, function(cancelled)\n        if not cancelled then\n            if onFinish then\n                onFinish()\n            end\n        else\n            if onCancel then\n                onCancel()\n            end\n        end\n    end)\nend\n\n-- Available parameters to be called\n\nlocal Action = {\n    name = "",\n    duration = 0,\n    label = "",\n    useWhileDead = false,\n    canCancel = true,\n    disarm = true,\n    controlDisables = {\n        disableMovement = false,\n        disableCarMovement = false,\n        disableMouse = false,\n        disableCombat = false,\n    },\n    animation = {\n        animDict = nil,\n        anim = nil,\n        flags = 0,\n        task = nil,\n    },\n    prop = {\n        model = nil,\n        bone = nil,\n        coords = { x = 0.0, y = 0.0, z = 0.0 },\n        rotation = { x = 0.0, y = 0.0, z = 0.0 },\n    },\n    propTwo = {\n        model = nil,\n        bone = nil,\n        coords = { x = 0.0, y = 0.0, z = 0.0 },\n        rotation = { x = 0.0, y = 0.0, z = 0.0 },\n    },\n}\n')),(0,r.kt)("h3",{id:"qbcorefunctionsgetvehicles"},"QBCore.Functions.GetVehicles"),(0,r.kt)("p",null,"Returns vehicle game pool (for backwards compatiblity) - Not worth using"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetVehicles()\n    return GetGamePool('CVehicle')\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetcoreobject"},"QBCore.Functions.GetCoreObject"),(0,r.kt)("p",null,"Return GetCoreObject"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"exports('GetCoreObject', function()\n    return QBCore\nend)\n")),(0,r.kt)("h3",{id:"example-exports-qbcorefunctionsgetcoreobject"},"Example exports QBCore.Functions.GetCoreObject"),(0,r.kt)("p",null,"You can simply import QBCore by calling the export below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"local QBCore = exports['qb-core']:GetCoreObject()\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetplayers"},"QBCore.Functions.GetPlayers"),(0,r.kt)("p",null,"Returns active players in scope (for backwards compatiblity) - Not worth using"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPlayers()\n    return GetActivePlayers()\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetpeds"},"QBCore.Functions.GetPeds"),(0,r.kt)("p",null,"Returns filtered ped game pool"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPeds(ignoreList)\n    local pedPool = GetGamePool('CPed')\n    local ignoreList = ignoreList or {}\n    local peds = {}\n    for i = 1, #pedPool, 1 do\n        local found = false\n        for j=1, #ignoreList, 1 do\n            if ignoreList[j] == pedPool[i] then\n                found = true\n            end\n        end\n        if not found then\n            peds[#peds+1] = pedPool[i]\n        end\n    end\n    return peds\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetclosestped"},"QBCore.Functions.GetClosestPed"),(0,r.kt)("p",null,"Returns a filtered closest ped to the client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetClosestPed(coords, ignoreList)\n    local ped = PlayerPedId()\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    local ignoreList = ignoreList or {}\n    local peds = QBCore.Functions.GetPeds(ignoreList)\n    local closestDistance = -1\n    local closestPed = -1\n    for i = 1, #peds, 1 do\n        local pedCoords = GetEntityCoords(peds[i])\n        local distance = #(pedCoords - coords)\n\n        if closestDistance == -1 or closestDistance > distance then\n            closestPed = peds[i]\n            closestDistance = distance\n        end\n    end\n    return closestPed, closestDistance\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetclosestvehicle"},"QBCore.Functions.GetClosestVehicle"),(0,r.kt)("p",null,"Returns the closest vehicle to the client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetClosestVehicle(coords)\n    local ped = PlayerPedId()\n    local vehicles = GetGamePool('CVehicle')\n    local closestDistance = -1\n    local closestVehicle = -1\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    for i = 1, #vehicles, 1 do\n        local vehicleCoords = GetEntityCoords(vehicles[i])\n        local distance = #(vehicleCoords - coords)\n\n        if closestDistance == -1 or closestDistance > distance then\n            closestVehicle = vehicles[i]\n            closestDistance = distance\n        end\n    end\n    return closestVehicle, closestDistance\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetclosestobject"},"QBCore.Functions.GetClosestObject"),(0,r.kt)("p",null,"Returns the closest object to the client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetClosestObject(coords)\n    local ped = PlayerPedId()\n    local objects = GetGamePool('CObject')\n    local closestDistance = -1\n    local closestObject = -1\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    for i = 1, #objects, 1 do\n        local objectCoords = GetEntityCoords(objects[i])\n        local distance = #(objectCoords - coords)\n        if closestDistance == -1 or closestDistance > distance then\n            closestObject = objects[i]\n            closestDistance = distance\n        end\n    end\n    return closestObject, closestDistance\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetclosestplayer"},"QBCore.Functions.GetClosestPlayer"),(0,r.kt)("p",null,"Returns the closest player to the client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetClosestPlayer(coords)\n    local ped = PlayerPedId()\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    local closestPlayers = QBCore.Functions.GetPlayersFromCoords(coords)\n    local closestDistance = -1\n    local closestPlayer = -1\n    for i = 1, #closestPlayers, 1 do\n        if closestPlayers[i] ~= PlayerId() and closestPlayers[i] ~= -1 then\n            local pos = GetEntityCoords(GetPlayerPed(closestPlayers[i]))\n            local distance = #(pos - coords)\n\n            if closestDistance == -1 or closestDistance > distance then\n                closestPlayer = closestPlayers[i]\n                closestDistance = distance\n            end\n        end\n    end\n    return closestPlayer, closestDistance\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetplayersfromcoords"},"QBCore.Functions.GetPlayersFromCoords"),(0,r.kt)("p",null,"Returns all players within a radius of specific coordinates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPlayersFromCoords(coords, distance)\n    local players = QBCore.Functions.GetPlayers()\n    local ped = PlayerPedId()\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    local distance = distance or 5\n    local closePlayers = {}\n    for _, player in pairs(players) do\n        local target = GetPlayerPed(player)\n        local targetCoords = GetEntityCoords(target)\n        local targetdistance = #(targetCoords - coords)\n        if targetdistance <= distance then\n            closePlayers[#closePlayers + 1] = player\n        end\n    end\n    return closePlayers\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsspawnvehicle"},"QBCore.Functions.SpawnVehicle"),(0,r.kt)("p",null,"Spawn a client-side vehicle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.SpawnVehicle(model, cb, coords, isnetworked)\n    local model = GetHashKey(model)\n    local ped = PlayerPedId()\n    if coords then\n        coords = type(coords) == 'table' and vec3(coords.x, coords.y, coords.z) or coords\n    else\n        coords = GetEntityCoords(ped)\n    end\n    local isnetworked = isnetworked or true\n    if not IsModelInCdimage(model) then\n        return\n    end\n    RequestModel(model)\n    while not HasModelLoaded(model) do\n        Wait(10)\n    end\n    local veh = CreateVehicle(model, coords.x, coords.y, coords.z, coords.w, isnetworked, false)\n    local netid = NetworkGetNetworkIdFromEntity(veh)\n    SetVehicleHasBeenOwnedByPlayer(veh, true)\n    SetNetworkIdCanMigrate(netid, true)\n    SetVehicleNeedsToBeHotwired(veh, false)\n    SetVehRadioStation(veh, 'OFF')\n    SetModelAsNoLongerNeeded(model)\n    if cb then\n        cb(veh)\n    end\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsdeletevehicle"},"QBCore.Functions.DeleteVehicle"),(0,r.kt)("p",null,"Delete a specific vehicle through the client - Not worth using"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.DeleteVehicle(vehicle)\n    SetEntityAsMissionEntity(vehicle, true, true)\n    DeleteVehicle(vehicle)\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetplate"},"QBCore.Functions.Getplate"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetPlate(vehicle)\n    if vehicle == 0 then return end\n    return QBCore.Shared.Trim(GetVehicleNumberPlateText(vehicle))\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionsgetvehicleproperties"},"QBCore.Functions.GetVehicleProperties"),(0,r.kt)("p",null,"Get all properties of a vehicle"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.GetVehicleProperties(vehicle)\n    if DoesEntityExist(vehicle) then\n        local colorPrimary, colorSecondary = GetVehicleColours(vehicle)\n        local pearlescentColor, wheelColor = GetVehicleExtraColours(vehicle)\n        local extras = {}\n\n        for extraId = 0, 12 do\n            if DoesExtraExist(vehicle, extraId) then\n                local state = IsVehicleExtraTurnedOn(vehicle, extraId) == 1\n                extras[tostring(extraId)] = state\n            end\n        end\n\n        if GetVehicleMod(vehicle, 48) == -1 and GetVehicleLivery(vehicle) ~= -1 then\n            modLivery = GetVehicleLivery(vehicle)\n        else\n            modLivery = GetVehicleMod(vehicle, 48)\n        end\n\n        return {\n            model = GetEntityModel(vehicle),\n            plate = QBCore.Functions.GetPlate(vehicle),\n            plateIndex = GetVehicleNumberPlateTextIndex(vehicle),\n            bodyHealth = QBCore.Shared.Round(GetVehicleBodyHealth(vehicle), 0.1),\n            engineHealth = QBCore.Shared.Round(GetVehicleEngineHealth(vehicle), 0.1),\n            tankHealth = QBCore.Shared.Round(GetVehiclePetrolTankHealth(vehicle), 0.1),\n            fuelLevel = QBCore.Shared.Round(GetVehicleFuelLevel(vehicle), 0.1),\n            dirtLevel = QBCore.Shared.Round(GetVehicleDirtLevel(vehicle), 0.1),\n            color1 = colorPrimary,\n            color2 = colorSecondary,\n            pearlescentColor = pearlescentColor,\n            interiorColor = GetVehicleInteriorColor(vehicle),\n            dashboardColor = GetVehicleDashboardColour(vehicle),\n            wheelColor = wheelColor,\n            wheels = GetVehicleWheelType(vehicle),\n            windowTint = GetVehicleWindowTint(vehicle),\n            xenonColor = GetVehicleXenonLightsColour(vehicle),\n            neonEnabled = {\n                IsVehicleNeonLightEnabled(vehicle, 0),\n                IsVehicleNeonLightEnabled(vehicle, 1),\n                IsVehicleNeonLightEnabled(vehicle, 2),\n                IsVehicleNeonLightEnabled(vehicle, 3)\n            },\n            neonColor = table.pack(GetVehicleNeonLightsColour(vehicle)),\n            extras = extras,\n            tyreSmokeColor = table.pack(GetVehicleTyreSmokeColor(vehicle)),\n            modSpoilers = GetVehicleMod(vehicle, 0),\n            modFrontBumper = GetVehicleMod(vehicle, 1),\n            modRearBumper = GetVehicleMod(vehicle, 2),\n            modSideSkirt = GetVehicleMod(vehicle, 3),\n            modExhaust = GetVehicleMod(vehicle, 4),\n            modFrame = GetVehicleMod(vehicle, 5),\n            modGrille = GetVehicleMod(vehicle, 6),\n            modHood = GetVehicleMod(vehicle, 7),\n            modFender = GetVehicleMod(vehicle, 8),\n            modRightFender = GetVehicleMod(vehicle, 9),\n            modRoof = GetVehicleMod(vehicle, 10),\n            modEngine = GetVehicleMod(vehicle, 11),\n            modBrakes = GetVehicleMod(vehicle, 12),\n            modTransmission = GetVehicleMod(vehicle, 13),\n            modHorns = GetVehicleMod(vehicle, 14),\n            modSuspension = GetVehicleMod(vehicle, 15),\n            modArmor = GetVehicleMod(vehicle, 16),\n            modTurbo = IsToggleModOn(vehicle, 18),\n            modSmokeEnabled = IsToggleModOn(vehicle, 20),\n            modXenon = IsToggleModOn(vehicle, 22),\n            modFrontWheels = GetVehicleMod(vehicle, 23),\n            modBackWheels = GetVehicleMod(vehicle, 24),\n            modCustomTiresF = GetVehicleModVariation(vehicle, 23),\n            modCustomTiresR = GetVehicleModVariation(vehicle, 24),\n            modPlateHolder = GetVehicleMod(vehicle, 25),\n            modVanityPlate = GetVehicleMod(vehicle, 26),\n            modTrimA = GetVehicleMod(vehicle, 27),\n            modOrnaments = GetVehicleMod(vehicle, 28),\n            modDashboard = GetVehicleMod(vehicle, 29),\n            modDial = GetVehicleMod(vehicle, 30),\n            modDoorSpeaker = GetVehicleMod(vehicle, 31),\n            modSeats = GetVehicleMod(vehicle, 32),\n            modSteeringWheel = GetVehicleMod(vehicle, 33),\n            modShifterLeavers = GetVehicleMod(vehicle, 34),\n            modAPlate = GetVehicleMod(vehicle, 35),\n            modSpeakers = GetVehicleMod(vehicle, 36),\n            modTrunk = GetVehicleMod(vehicle, 37),\n            modHydrolic = GetVehicleMod(vehicle, 38),\n            modEngineBlock = GetVehicleMod(vehicle, 39),\n            modAirFilter = GetVehicleMod(vehicle, 40),\n            modStruts = GetVehicleMod(vehicle, 41),\n            modArchCover = GetVehicleMod(vehicle, 42),\n            modAerials = GetVehicleMod(vehicle, 43),\n            modTrimB = GetVehicleMod(vehicle, 44),\n            modTank = GetVehicleMod(vehicle, 45),\n            modWindows = GetVehicleMod(vehicle, 46),\n            modLivery = modLivery,\n        }\n    else\n        return\n    end\nend\n")),(0,r.kt)("h3",{id:"qbcorefunctionssetvehicleproperties"},"QBCore.Functions.SetVehicleProperties"),(0,r.kt)("p",null,"Set all properties for a vehicle after getting them"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"function QBCore.Functions.SetVehicleProperties(vehicle, props)\n    if DoesEntityExist(vehicle) then\n        local colorPrimary, colorSecondary = GetVehicleColours(vehicle)\n        local pearlescentColor, wheelColor = GetVehicleExtraColours(vehicle)\n        SetVehicleModKit(vehicle, 0)\n        if props.plate then\n            SetVehicleNumberPlateText(vehicle, props.plate)\n        end\n        if props.plateIndex then\n            SetVehicleNumberPlateTextIndex(vehicle, props.plateIndex)\n        end\n        if props.bodyHealth then\n            SetVehicleBodyHealth(vehicle, props.bodyHealth + 0.0)\n        end\n        if props.engineHealth then\n            SetVehicleEngineHealth(vehicle, props.engineHealth + 0.0)\n        end\n        if props.fuelLevel then\n            SetVehicleFuelLevel(vehicle, props.fuelLevel + 0.0)\n        end\n        if props.dirtLevel then\n            SetVehicleDirtLevel(vehicle, props.dirtLevel + 0.0)\n        end\n        if props.color1 then\n            SetVehicleColours(vehicle, props.color1, colorSecondary)\n        end\n        if props.color2 then\n            SetVehicleColours(vehicle, props.color1 or colorPrimary, props.color2)\n        end\n        if props.pearlescentColor then\n            SetVehicleExtraColours(vehicle, props.pearlescentColor, wheelColor)\n        end\n        if props.interiorColor then\n            SetVehicleInteriorColor(vehicle, props.interiorColor)\n        end\n        if props.dashboardColor then\n            SetVehicleDashboardColour(vehicle, props.dashboardColor)\n        end\n        if props.wheelColor then\n            SetVehicleExtraColours(vehicle, props.pearlescentColor or pearlescentColor, props.wheelColor)\n        end\n        if props.wheels then\n            SetVehicleWheelType(vehicle, props.wheels)\n        end\n        if props.windowTint then\n            SetVehicleWindowTint(vehicle, props.windowTint)\n        end\n        if props.neonEnabled then\n            SetVehicleNeonLightEnabled(vehicle, 0, props.neonEnabled[1])\n            SetVehicleNeonLightEnabled(vehicle, 1, props.neonEnabled[2])\n            SetVehicleNeonLightEnabled(vehicle, 2, props.neonEnabled[3])\n            SetVehicleNeonLightEnabled(vehicle, 3, props.neonEnabled[4])\n        end\n        if props.extras then\n            for id, enabled in pairs(props.extras) do\n                if enabled then\n                    SetVehicleExtra(vehicle, tonumber(id), 0)\n                else\n                    SetVehicleExtra(vehicle, tonumber(id), 1)\n                end\n            end\n        end\n        if props.neonColor then\n            SetVehicleNeonLightsColour(vehicle, props.neonColor[1], props.neonColor[2], props.neonColor[3])\n        end\n        if props.modSmokeEnabled then\n            ToggleVehicleMod(vehicle, 20, true)\n        end\n        if props.tyreSmokeColor then\n            SetVehicleTyreSmokeColor(vehicle, props.tyreSmokeColor[1], props.tyreSmokeColor[2], props.tyreSmokeColor[3])\n        end\n        if props.modSpoilers then\n            SetVehicleMod(vehicle, 0, props.modSpoilers, false)\n        end\n        if props.modFrontBumper then\n            SetVehicleMod(vehicle, 1, props.modFrontBumper, false)\n        end\n        if props.modRearBumper then\n            SetVehicleMod(vehicle, 2, props.modRearBumper, false)\n        end\n        if props.modSideSkirt then\n            SetVehicleMod(vehicle, 3, props.modSideSkirt, false)\n        end\n        if props.modExhaust then\n            SetVehicleMod(vehicle, 4, props.modExhaust, false)\n        end\n        if props.modFrame then\n            SetVehicleMod(vehicle, 5, props.modFrame, false)\n        end\n        if props.modGrille then\n            SetVehicleMod(vehicle, 6, props.modGrille, false)\n        end\n        if props.modHood then\n            SetVehicleMod(vehicle, 7, props.modHood, false)\n        end\n        if props.modFender then\n            SetVehicleMod(vehicle, 8, props.modFender, false)\n        end\n        if props.modRightFender then\n            SetVehicleMod(vehicle, 9, props.modRightFender, false)\n        end\n        if props.modRoof then\n            SetVehicleMod(vehicle, 10, props.modRoof, false)\n        end\n        if props.modEngine then\n            SetVehicleMod(vehicle, 11, props.modEngine, false)\n        end\n        if props.modBrakes then\n            SetVehicleMod(vehicle, 12, props.modBrakes, false)\n        end\n        if props.modTransmission then\n            SetVehicleMod(vehicle, 13, props.modTransmission, false)\n        end\n        if props.modHorns then\n            SetVehicleMod(vehicle, 14, props.modHorns, false)\n        end\n        if props.modSuspension then\n            SetVehicleMod(vehicle, 15, props.modSuspension, false)\n        end\n        if props.modArmor then\n            SetVehicleMod(vehicle, 16, props.modArmor, false)\n        end\n        if props.modTurbo then\n            ToggleVehicleMod(vehicle, 18, props.modTurbo)\n        end\n        if props.modXenon then\n            ToggleVehicleMod(vehicle, 22, props.modXenon)\n        end\n        if props.xenonColor then\n            SetVehicleXenonLightsColor(vehicle, props.xenonColor)\n        end\n        if props.modFrontWheels then\n            SetVehicleMod(vehicle, 23, props.modFrontWheels, false)\n        end\n        if props.modBackWheels then\n            SetVehicleMod(vehicle, 24, props.modBackWheels, false)\n        end\n        if props.modCustomTiresF then\n            SetVehicleMod(vehicle, 23, props.modFrontWheels, props.modCustomTiresF)\n        end\n        if props.modCustomTiresR then\n            SetVehicleMod(vehicle, 24, props.modBackWheels, props.modCustomTiresR)\n        end\n        if props.modPlateHolder then\n            SetVehicleMod(vehicle, 25, props.modPlateHolder, false)\n        end\n        if props.modVanityPlate then\n            SetVehicleMod(vehicle, 26, props.modVanityPlate, false)\n        end\n        if props.modTrimA then\n            SetVehicleMod(vehicle, 27, props.modTrimA, false)\n        end\n        if props.modOrnaments then\n            SetVehicleMod(vehicle, 28, props.modOrnaments, false)\n        end\n        if props.modDashboard then\n            SetVehicleMod(vehicle, 29, props.modDashboard, false)\n        end\n        if props.modDial then\n            SetVehicleMod(vehicle, 30, props.modDial, false)\n        end\n        if props.modDoorSpeaker then\n            SetVehicleMod(vehicle, 31, props.modDoorSpeaker, false)\n        end\n        if props.modSeats then\n            SetVehicleMod(vehicle, 32, props.modSeats, false)\n        end\n        if props.modSteeringWheel then\n            SetVehicleMod(vehicle, 33, props.modSteeringWheel, false)\n        end\n        if props.modShifterLeavers then\n            SetVehicleMod(vehicle, 34, props.modShifterLeavers, false)\n        end\n        if props.modAPlate then\n            SetVehicleMod(vehicle, 35, props.modAPlate, false)\n        end\n        if props.modSpeakers then\n            SetVehicleMod(vehicle, 36, props.modSpeakers, false)\n        end\n        if props.modTrunk then\n            SetVehicleMod(vehicle, 37, props.modTrunk, false)\n        end\n        if props.modHydrolic then\n            SetVehicleMod(vehicle, 38, props.modHydrolic, false)\n        end\n        if props.modEngineBlock then\n            SetVehicleMod(vehicle, 39, props.modEngineBlock, false)\n        end\n        if props.modAirFilter then\n            SetVehicleMod(vehicle, 40, props.modAirFilter, false)\n        end\n        if props.modStruts then\n            SetVehicleMod(vehicle, 41, props.modStruts, false)\n        end\n        if props.modArchCover then\n            SetVehicleMod(vehicle, 42, props.modArchCover, false)\n        end\n        if props.modAerials then\n            SetVehicleMod(vehicle, 43, props.modAerials, false)\n        end\n        if props.modTrimB then\n            SetVehicleMod(vehicle, 44, props.modTrimB, false)\n        end\n        if props.modTank then\n            SetVehicleMod(vehicle, 45, props.modTank, false)\n        end\n        if props.modWindows then\n            SetVehicleMod(vehicle, 46, props.modWindows, false)\n        end\n        if props.modLivery then\n            SetVehicleMod(vehicle, 48, props.modLivery, false)\n            SetVehicleLivery(vehicle, props.modLivery)\n        end\n    end\nend\n")))}p.isMDXComponent=!0}}]);